<?php
/*
* Class get IP pool telco
*
*/
class IpHelper {
	
	/*
	* check IP for network : IpHelper::getIspNameByIp($ip); return VIETTEL,FPT ..etc
	*/
    static $ISPS = array('VNPT', 'FPT', 'VIETTEL', 'Others','MOBIFONE');
    /* Define ISP network range in CIDR notation
     * Data source: http://www.vnix.vn/4-6-300-0-7-00-20041115.htm
     * for more information:
     *    http://en.wikipedia.org/wiki/CIDR_notation
     *    http://wiki.xtronics.com/index.php/IP_Subnet_Masks
     */
    static $ispList = Array(
		'MOBIFONE'=>array(
			'10.54.0.0/16',
			'10.65.0.0/16',
			'10.66.0.0/16',
			'10.67.0.0/16',
			'10.68.0.0/16',
			'10.69.0.0/16',
			'10.70.0.0/16',
			'10.71.0.0/16',
			'10.72.0.0/16',
			'10.73.0.0/16',
			'10.74.0.0/16',
			'10.75.0.0/16',
			'10.76.0.0/16',
			'10.77.0.0/16',
			'10.78.0.0/16',
			'10.79.0.0/16',
			'10.80.0.0/16',
			'10.81.0.0/16',
			'10.82.0.0/16',
			'10.83.0.0/16',
			'10.84.0.0/16',
			'10.85.0.0/16',
			'10.86.0.0/16',
			'10.87.0.0/16',
			'10.88.0.0/16',
			'10.89.0.0/16',
			'10.90.0.0/16',
			'10.91.0.0/16',
			'10.92.0.0/16',
			'10.93.0.0/16',
			'10.94.0.0/16',
			'10.95.0.0/16',
			'10.96.0.0/16',
			'10.97.0.0/16',
			'10.98.0.0/16',
			'10.99.0.0/16',
			'10.100.0.0/16',
			'10.101.0.0/16',
			'10.102.0.0/16',
			'10.103.0.0/16',
			'10.104.0.0/16',
			'10.105.0.0/16',
			'10.106.0.0/16',
			'10.107.0.0/16',
			'10.108.0.0/16',
			'10.109.0.0/16',
			'10.110.0.0/16',
			'10.111.0.0/16',
			'10.112.0.0/16',
			'10.113.0.0/16',
			'10.114.0.0/16',
			'10.115.0.0/16',
			'10.116.0.0/16',
			'10.117.0.0/16',
			'10.118.0.0/16',
			'10.119.0.0/16',
			'10.120.0.0/16',
			'10.121.0.0/16',
			'10.122.0.0/16',
			'10.123.0.0/16',
			'10.124.0.0/16',
			'10.125.0.0/16',
			'10.126.0.0/16',
			'10.127.0.0/16',
			'10.128.0.0/16',
			'10.129.0.0/16',
			'10.130.0.0/16',
			'10.131.0.0/16',
			'10.132.0.0/16',
			'10.133.0.0/16',
			'10.134.0.0/16',
			'10.135.0.0/16',
			'10.136.0.0/16',
			'10.137.0.0/16',
			'10.138.0.0/16',
			'10.139.0.0/16',
			'10.140.0.0/16',
			'10.141.0.0/16',
			'10.142.0.0/16',
			'10.143.0.0/16',
			'10.144.0.0/16',
			'10.145.0.0/16',
			'10.146.0.0/16',
			'10.147.0.0/16',
			'10.148.0.0/16',
			'10.149.0.0/16',
			'10.150.0.0/16',
			'10.152.0.0/16',
			'10.153.0.0/16',
			'10.157.0.0/16',
			'10.158.0.0/16',
			'10.159.0.0/16',
			'10.160.0.0/16',
			'10.163.0.0/16',
			'10.164.0.0/16',
			'10.165.0.0/16',
			'10.166.0.0/16',
			'10.167.0.0/16',
			'10.168.0.0/16',
			'10.169.0.0/16',
			'10.170.0.0/16',
			'10.171.0.0/16',
			'10.172.0.0/16',
			'10.173.0.0/16',
			'10.174.0.0/16',
			'10.175.0.0/16',
			'10.176.0.0/16',
			'10.177.0.0/16',
			'10.178.0.0/16',
			'10.179.0.0/16',
			'10.180.0.0/16',
			'10.181.0.0/16',
			'10.182.0.0/16',
			'10.183.0.0/16',
			'10.184.0.0/16',
			'10.185.0.0/16',
			'10.186.0.0/16',
			'10.187.0.0/16',
			'10.188.0.0/16',
			'10.189.0.0/16',
			'10.190.0.0/16',
			'10.191.0.0/16',
			'10.193.0.0/16',
			'10.194.0.0/16',
			'10.195.0.0/16',
			'10.196.0.0/16',
			'10.199.0.0/16',
			'10.200.0.0/16',
			'10.201.0.0/16',
			'10.202.0.0/16',
			'10.244.0.0/16',


			'10.171.0.0/20',
			'10.171.16.0/20',
			'10.171.160.0/20',
			'10.171.176.0/20',
			'10.172.0.0/20',
			'10.172.16.0/20',
			'10.172.160.0/20',
			'10.172.176.0/20',
			'103.237.66.0/24',
			'103.237.66.0/24',
			'113.187.22.0/24',
			'113.187.23.0/24',
			'113.187.24.0/24',
			'113.187.25.0/24',
			'113.191.8.128/25',
			'222.255.208.0/24',
			'222.255.209.0/24',
			'10.54.34.0/24',
			'10.54.67.0/24',
			'103.234.88.0/24',
			'103.234.89.0/24',
			'113.187.22.0/24 ',
			'113.187.23.0/24',
			'113.187.24.0/24',
			'113.187.25.0/24',
			'113.191.8.128/25',
			'113.187.0.0/24',
			'113.191.8.0/24',
			'113.187.4.0/24',
			'111.91.234.0/24',
			'123.30.87.0/28',
			'123.30.83.16/29',
			'222.255.208.0/24',
			'222.255.209.0/24',
			'123.30.165.0/25',
			'123.30.165.128/25',
			'113.187.16.0/23',
			'101.99.46.240/28',
			'101.99.29.240/28',
			'111.91.234.0/25',
			'113.187.18.0/23',
			'113.187.20.0/23',
			'222.255.208.0/23',
			'37.228.104.0/21',
			'58.67.157.0/24',
			'59.151.95.128/25',
			'59.151.98.128/27',
			'59.151.106.224/27',
			'59.151.120.32/27',
			'80.84.1.0/24',
			'80.239.242.0/23',
			'82.145.208.0/20',
			'91.203.96.0/22',
			'116.58.209.36/27',
			'116.58.209.128/27',
			'141.0.8.0/21',
			'195.189.142.0/23',
			'203.81.19.0/24',
			'209.170.68.0/24',
			'217.212.230.0/23',
			'217.212.226.0/24',
			'185.26.180.0/22',
			'111.91.234.128/25',
			'10.160.0.0/17',
			'10.160.128.0/17',
			'10.183.0.0/19',
			'10.183.32.0/19',
			'10.183.64.0/19',
			'10.183.96.0/19',
			'10.183.128.0/19',
			'10.183.160.0/19',
			'10.183.192.0/19',
			'10.183.224.0/19',
			'10.216.0.0/15',
			'10.218.0.0/15',
			'10.220.0.0/15',
			'10.222.0.0/15',
			'10.224.0.0/15',
			'10.226.0.0/15',
			'10.228.0.0/15',
			'10.230.0.0/15',
			'10.232.0.0/15',
			'10.234.0.0/15',
			'10.236.0.0/15',
			'10.238.0.0/15',
			'10.240.0.0/15',
			'10.242.0.0/15',
			'10.110.0.0/15',
			'10.120.0.0/15',
			'10.122.0.0/15',
			'10.148.0.0/15',
			'10.152.0.0/15',
			'10.204.0.0/15',
			'10.206.0.0/15',
			'10.208.0.0/15',
			'10.210.0.0/15',
			'10.212.0.0/15',
			'10.214.0.0/15',
			'10.109.0.0/16',
			'10.181.0.0/16',
			'10.192.0.0/16',
			'10.150.0.0/16',
			'10.182.0.0/16',
			'10.203.0.0/16',


		),
    );

    public static function getIspNameByIp($ip) {
        return self::getIspName($ip,self::$ispList);
    }

    public static function getIspName($ip, $ispList) {
        $keys = array_keys($ispList);

        foreach ($keys as $ispName) {
            if (self::inNetwork($ip, $ispList[$ispName])){
                return $ispName;
			}
        }
        return null;
    }

    /**
     * @return string Name of ISP based on current user's ip
     */
    public static function getUserIspName($ip='') {
		if(empty($ip))
			$ip = $_SERVER['REMOTE_ADDR'];
        $return = self::getIspNameByIp($ip);
		return $return;
    }

    public static function isForeign($ip ='') {
        $isp = self::getUserIspName($ip);
        return $isp ? FALSE : TRUE;
    }

    /*
     * inNetwork
     * description: Check if a ip belong to a network
     * @param $ip - format: x.x.x.x
     * @param $network - Subnet theo CIDR format (x.x.x.x/xx) hoac 1 array cac subnet 
     * @author TungNS
     * @since Jul 28, 2011
     * @return true/false
     * example:
     *      Vega_Net_Ip::inNetwork('113.160.24.110', '113.160.0.0/11');
     *      Vega_Net_Ip::inNetwork('113.160.24.110', Array('113.160.0.0/11', '123.16.0.0/12'));
     */

    public static function inNetwork($ip, $network) {
        if (is_array($network)) {
            //in case of network array, we'll check recusively
            foreach ($network as $child) {
                if (self::inNetwork($ip, $child))
                    return true;
            }
        } else {
			//echo $ip.'-'.$network;
			//now $network is a string
			/*
            list($networkIp, $networkSubnet) = explode('/', $network);
            $ipStr = sprintf('%032b', ip2long($ip));
            $networkStr = sprintf('%032b', ip2long($networkIp));
			echo '$networkStr'.$networkStr."\n";
			echo '$ipStr'.$ipStr."\n";
			
            $return = (strncmp($ipStr, $networkStr, $networkSubnet) == 0);
			var_dump($return);
			return $return;
			*/
			//thongnv add
			list ($subnet, $bits) = explode('/', $network);
			$ip = ip2long($ip);
			$subnet = ip2long($subnet);
			$mask = -1 << (32 - $bits);
			$subnet &= $mask; # dua vao trong truong hop subnet khong dung
			return ($ip & $mask) == $subnet;
			
        }
		return false;
    }
}
